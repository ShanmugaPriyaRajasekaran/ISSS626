---
title: "Hands on Exercise 1a: Geospatial Data Wrangling with R"
date: "29-Aug-25"
date-modified: "last-modified"
toc: true
toc-depth: 4
format: html
editor: visual
---

# 1 Overview 
Geospatial Analytics goes beyond maps! It is about working with data linked to real-world locations, importing, cleaning, combining, and analyzing it to uncover patterns and insights. 
In this Hands-on exercise, we will use R packages to work with spatial datasets and practice the full workflow of processing and exploring georeferenced information.

# 2 Data Acquistion

In this hands-on exercise, We have to extract the necessary data sets from the following sources:

- **a) Master Plan 2014 Subzone Boundary (Web)**\
 Source : [data.gov.sg](https://data.gov.sg/) {.underline}\
 Format : SHP\
 Type : Geospatial
 
- **b) Pre-Schools Location**\
 Source : [data.gov.sg](https://data.gov.sg/)\
 Format : KML\
 Type : Geospatial
 
- **c) Cycling Path**\
 Source : [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)\
 Format : SHP\
 Type : Geospatial
 
- **d) Inside Airbnb**\
 Source : Singapore Airbnb listing [Inside Airbnb](http://insideairbnb.com/get-the-data.html)\
 Format : CSV\
 Type : Aspatial
 

# 3 Loading R packages

- [**tidyverse**](https://www.tidyverse.org/) : A collection of R packages for data science which helps in importing, cleaning, transforming, and visualizing data.

- [**sf**](https://r-spatial.github.io/sf/) : Provides simple features for handling, managing, and analyzing spatial (georeferenced) data.

Together, these packages let us work with both tabular and geospatial datasets in a smooth workflow.

The code chunk below installs and loads **sf** and **tidyverse** packages into R environment using `p_load` from the **pacman** package.

```{r}
pacman::p_load(sf,tidyverse)
```


# 4 Importing Geospatial data

## 4a) Import polygon feature data in shapefile format

The code chunk below uses *st_read()* function of sf package:

-   to read simple features form file/database
-   imports **MP14_SUBZONE_WEB_PL** shapefile into R as [polygon]{.underline} feature data frame
-   *dsn* = defines data path and *layer* = provide the shapefile name

```{r}
mpsz = st_read(dsn = "data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")

```
::: {.insightbox}
**Observations**

- 323 subzones represented as multipolygons with 15 attributes.  
- Uses **SVY21 CRS** for accurate distance and area measures.  
- Bounding box confirms full Singapore coverage.  
:::




## 4b) Importing polyline feature data in shapefile form

The code chunk below imports *CyclingPath* shapefile into R as line{.underline} feature data frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```
::: {.insightbox}
**Observations**

- Contains **4,651 cycling path features** stored as multilines{.underline} with **19** attributes.  
- Captures the **network of cycling paths** across Singapore within the **SVY21 CRS**.  
- Bounding box shows the dataset spans the country’s extent.  
:::

## 4c) Importing GIS data in kml format

The `PreSchoolsLocation`is in kml format. The code chunk below will be used to import the kml into R.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```
::: {.insightbox}
**Observations**

- Dataset contains **2,290 preschool locations** stored as points{.underline} with **2** attributes.  
- Stored in **WGS 84 CRS**, suitable for global latitude–longitude mapping.  
:::

# 5 Checking the Content of A Simple Feature Data Frame
**Prior to wrangle the geospatial data, it is always a good practice for us to know more about the data sets first.

## 5a) Working with st_geometry()
- In a sf data frame, the geometry column is a list-column of class *sfc*.

- We can access it directly with mpsz$geom or mpsz\[[1]].

- The general recommended way is st_geometry(mpsz)

```{r}
st_geometry(mpsz)
```

## 5b) Working with glimpse()

- Beyond basic geometry, we often need to inspect the attribute columns in the sf data frame.

- It’s handy for quickly understanding structure, spotting odd types or missing values, and confirming row/column counts.


```{r}
glimpse(mpsz)
```

## 5c) Working with head()

- head() displays the top rows of a data frame.

- The argument n sets how many rows to show (e.g., head(mpsz, n = 5 or 10)).

```{r}
head(mpsz, n=10)
```

# 6 Plotting the Geospatial Data

In geospatial data science, we can visualise the geospatial features using *plot()* function of R.

```{r}
par(bg = '#fffbe8')
plot(mpsz)
```
We can plot only the geometry using the below code:

```{r}
par(bg = '#fffbe8')
plot(st_geometry(mpsz))
```

Alternatively, to plot the sf object by using a specific attribute:

```{r}
par(bg = '#fffbe8')
plot(mpsz["PLN_AREA_N"])
```

Let us plot the preschool layer ontop of the mpsz layer:

```{r}
par(bg = '#fffbe8')
plot(st_geometry(mpsz))
plot(st_geometry(preschool), 
     add = TRUE)
```

::: {.insightbox}
**Observations**

*Ques : Note that the preschool point objects failed to plot ontop of the mpsz layer. Do you know why?*

- The dots didn’t show because the two layers use different coordinate systems.

- Mpsz is in SVY21 / EPSG:3414 (metres) and the preschool points are in WGS84 / EPSG:4326 (degrees), so they don’t line up.

- We can fix it by making both layers the same CRS. 
*preschool <- sf::st_transform(preschool, sf::st_crs(mpsz))*

- Plot order also matters: draw mpsz polygons first, then plot the preschool points. 
:::

```{r}
preschool <- sf::st_transform(preschool, sf::st_crs(mpsz))
```

```{r}
par(bg = '#fffbe8')
plot(st_geometry(mpsz))
plot(st_geometry(preschool), 
     add = TRUE)
```

```{r}
preschool <- sf::st_transform(preschool, sf::st_crs(mpsz))

par(bg = "#fffbe8")
plot(st_geometry(mpsz), col="grey95", border="grey60", reset = FALSE)
plot(st_geometry(preschool), pch = 16, cex = 0.6, col = "#d1495b", add = TRUE)

```

# 7 Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

## 7a) Assigning EPSG code to a simple feature data frame

A common issue during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

We sense that the EPSG code is indicated as 9001 which is incorrect,Although `mpsz` data frame is projected in svy21 and the correct EPSG code for svy21 should be [3414](https://epsg.io/3414)

```{r}
st_crs(mpsz)
```

In order to assign the correct EPSG code to `mpsz` data frame,we use *st_set_crs()* of **sf** package.

```{r}
mpsz <- st_set_crs(mpsz, 3414)
```

Let us check the CSR again.

```{r}
st_crs(mpsz)
```

## 7b) Transforming the projection of preschool from wgs84 to svy21

In geospatial analytics, it is common for us to transform the original data from geographic coordinate system to projected coordinate system as geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

Let us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```


This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.

Let us perform the projection transformation by using the code chunk below.

```{r}
preschool <- st_transform(preschool, 
                              crs = 3414)
```


Let us try to plot the preschool layer ontop of mpsz layer again.

```{r}
par(bg = '#fffbe8')
plot(st_geometry(mpsz))
plot(st_geometry(preschool), add = TRUE)
```

# 8 Importing and Converting An Aspatial Data

Sometimes our data is just a normal table, like the Inside Airbnb listings. It isn’t geospatial yet, so we call it aspatial, even though it has two columns with the coordinates (x = longitude, y = latitude).

In this section, let us first load the CSV into R as a tibble, then use those coordinate columns to turn it into an sf (simple features) data frame.Let us use the Airbnb listings.csv file.

## 8a) Importing the aspatial data

Since `listings` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).

```{r}
listings <- read_csv("data/aspatial/listings.csv")

```

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.We use *list()* instead of *glimpse()* 

```{r}
list(listings)
```

## 8b) Creating a simple feature data frame from an aspatial data frame

The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Arguments:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to [epsg.io](https://epsg.io/).

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```


::: {.insightbox}
**DIY:**
**Using the method you learned earlier, plot listing_sf layer on top of mpsz layer.**

### 1) Make sure CRS matches (transform points to mpsz CRS)
```{r}
listings_sf <- st_transform(listings_sf, st_crs(mpsz))
```

### 2) Plot: mpsz first, then listings on top
```{r}
par(bg = "#fffbe8")
plot(st_geometry(mpsz), col = "grey95", border = "grey60", reset = FALSE)
plot(st_geometry(listings_sf), pch = 16, cex = 0.5, col = "#d1495b", add = TRUE)
```

:::

# 9 Geoprocessing with sf package

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

## 9a) Use case 1: Land acquisition analysis

### The scenario

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the existing cycling path.We are tasked to determine the extend of the land need to be acquired and their total area.

### The solution

**9a.1  [`st_buffer()`](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths** 

```{r}
buffer_cycling <- st_buffer(  cyclingpath, dist=5, nQuadSegs = 30)
```

**9a.2 Followed by calculating the area of the buffers**

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

```{r}
buffer_cycling <- buffer_cycling %>%  mutate(AREA = st_area(geometry))
```

**9a.3 `sum()` of Base R will be used to derive the total land involved**

```{r}
sum(buffer_cycling$AREA)
```

We can also create a plot showing the buffer by a selected planning subzone.

Assuming that we are interested on the land acquisition in Tampines West planning subzone.

Firstly, `filter()` of dplyr package will be used to extract polygon feature of Tampines West by using the code chunk below.\

```{r}
mpsz_selected <- mpsz %>%  filter(SUBZONE_N == "TAMPINES WEST") 
```

Next, `st_intersection()` of **sf** package will be used to clip cycling buffers within Tampines West planning subzone.

```{r}
buffer_cycling <- st_transform(buffer_cycling, st_crs(mpsz_selected))
mpsz_selected <- st_transform(mpsz_selected, st_crs(buffer_cycling))
buffer_cycling_selected <- st_intersection(buffer_cycling, mpsz_selected)
```

Finally, we plot the result

```{r}
par(bg = "#fffbe8")
plot(st_geometry(mpsz_selected), col = "lightgrey", main = "Buffer Zone in Tampines West")
plot(st_geometry(buffer_cycling_selected), col = "#d1495b", add = TRUE)
```


## 9b) Use case 2: To determine the number of pre-schools by planning subzone

### The scenario

The authority requires a count of pre-schools for each planning subzone to support forward planning. Using R and the sf package, perform the necessary geoprocessing to compute these counts and present the results clearly.

### The solution

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [`st_intersects()`](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [`length()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz$`PreSch Count`<- lengths(st_intersects(mpsz, preschool))
```

-   st_intersects() checks which points fall inside each polygon.
-   lengths() counts how many pre-schools intersect each subzone.

**9b.1 View summary statistics**

```{r}
summary(mpsz$`PreSch Count`)
```

-   This shows min, max, mean, and quartiles of pre-school counts.

**9b.2 Find subzone with the most pre-schools**

```{r}
top_n(mpsz, 1, `PreSch Count`)
```

-   top_n() returns the subzone with the highest count.

**9b.3 Calculate area of each subzone**

```{r}
mpsz$Area <- st_area(mpsz)
```

-   Adds a new column Area with the size of each subzone in square meters.

**9b.4 Compute pre-school density**

```{r}
mpsz <- mpsz %>%
  mutate(`PreSch Density` = `PreSch Count` / Area * 1e6)
```

-   Converts count per square meter to count per square kilometer.

**9b.5 Visualize Pre-School Density**

Histogram using base R

```{r}
hist(mpsz$`PreSch Density`)
```

-   Quick view of distribution, but limited styling.

Histogram using ggplot2

```{r}
library(ggplot2)
ggplot(data = mpsz, aes(x = as.numeric(`PreSch Density`))) +
  geom_histogram(bins = 20, color = "black", fill = "light blue") +
  labs(
    title = "Are pre-schools evenly distributed in Singapore?",
    subtitle = "Many subzones have only one pre-school, while seven have 30 or more.",
    x = "Pre-school density (per km²)",
    y = "Frequency"
  )
```

-   A polished histogram with custom labels and colors.

**9b.6 Scatterplot of Density vs Count**

```{r}
ggplot(data = mpsz, aes(x = as.numeric(`PreSch Density`), y = `PreSch Count`)) +
  geom_point(color = "black", fill = "light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(
    x = "Pre-school density (per km²)",
    y = "Pre-school count"
  )
```

-   Shows the relationship between density and total count per subzone.







