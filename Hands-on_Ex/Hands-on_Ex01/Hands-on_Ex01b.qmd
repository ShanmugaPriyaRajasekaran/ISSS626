---
title: "Hands on Exercise 1b: Thematic Mapping and GeoVisualisation with R"
date: "29-Aug-25"
date-modified: "last-modified"
toc: true
toc-depth: 4
format: html
editor: visual
---

# 1 Overview

Thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.

Geovisualisation, on the other hand, is the process of using visual representations and cartographic techniques to explore, analyze, and communicate geospatial data. It combines elements of cartography, computer science, and information visualization to enhance spatial understanding and knowledge discovery.

A choropleth map colors areas (e.g., planning subzones) based on a number so we can spot patterns quickly darker usually means higher values. To keep it truthful, let us map rates or densities (not raw counts), pick sensible class breaks, use a clear sequential palette, and include a readable legend and title with a consistent projection.

Let us use the tmap package in R to build functional choropleths by adjusting styles and palettes while checking CRS and missing values so the story stays accurate.

# 2 Packages

We will use [**tmap**](https://cran.r-project.org/web/packages/tmap/) package and five other R packages as follows:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.

-   [**rvest**](https://rvest.tidyverse.org/) for scraping (or harvesting) data from web pages.

The code chunk below will be used to install and load these packages in RStudio.

```{r}
pacman::p_load(sf, tmap, tidyverse, rvest)
```

# 3 Importing Data into R

In this hands-on exercise, We have to extract the necessary data sets to create the choropleth map from the following sources:

- **a) Master Plan 2019 Subzone Boundary (No Sea) (KML)**\
 Source : [data.gov.sg](https://data.gov.sg/)\
 Format : KML\
 Type : Geospatial

- **b) Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2024 (i.e. `respopagesextod2024.csv`) **\
 Source : [Department of Statistics, Singapore](https://www.singstat.gov.sg/)\
 Format : CSV\
 Type : Aspatial

## 3a) Importing Geospatial Data into R

The code chunk below uses the *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a simple feature data frame called `mpsz`.

```{r}
mpsz <- st_read("data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
```

Create a helper function to extract values from the HTML description

```{r}
extract_kml_field <- function(html_text, field_name) {   
  if (is.na(html_text) || html_text == "") return(NA_character_)      
  page <- read_html(html_text)  
  rows <- page %>% html_elements("tr")    
  value <- rows %>%     
    keep(~ html_text2(html_element(.x, "th")) == field_name) %>%    
    html_element("td") %>%    
    html_text2()     
  if (length(value) == 0) NA_character_ else value }
```

Applying the function created and extracting the relevant fields , then adding 4 columns to mpsz.
```{r}
mpsz <- mpsz %>%
  mutate(
    REGION_N = map_chr(Description, extract_kml_field, "REGION_N"),
    PLN_AREA_N = map_chr(Description, extract_kml_field, "PLN_AREA_N"),
    SUBZONE_N = map_chr(Description, extract_kml_field, "SUBZONE_N"),
    SUBZONE_C = map_chr(Description, extract_kml_field, "SUBZONE_C")
  ) %>%
  select(-Name, -Description) %>%
  relocate(geometry, .after = last_col())
```

```{r}
mpsz
```

::: {.insightbox}
**Observations**
**Notice that only the first ten records will be displayed. Do you know why?**

We could view only the first 10 records because sf/tibble prints a short preview by default. R truncates to the first 10 features to **keep the console tidy and fast**.Nothing is wrong with the data. To see more, increase n (e.g., print(st_geometry(mpsz), n = 50) or print(mpsz, n = Inf)) or use head(mpsz, 20) / nrow(mpsz).

:::

## 3b) Importing Aspatial Data into R

Next, we will import *respopagesextod2024.csv* file into RStudio and save the file into an tibble dataframe called *popdata* by using *read_csv()* function of **readr** package.

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2024.csv")
```


```{r}
popdata <- popdata %>%
  mutate(Pop = as.numeric(Pop))
```

# 4 Data Preparation

Before a thematic map can be prepared, we need to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

-   YOUNG: age group 0 to 4 until age groyup 20 to 24,

-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,

-   AGED: age group 65 and above,

-   TOTAL: all age group, and

-   DEPENDENCY: the ratio between young and aged against economy active group

## 4a) Data wrangling

The following data wrangling and transformation functions will be used:

-   *pivot_wider()* of **tidyr** package, and

-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package

```{r}
popdata2024 <- popdata %>%   
  group_by(PA, SZ, AG) %>%   
  summarise(`POP` = sum(`Pop`)) %>%  
  ungroup()%>%  
  pivot_wider(names_from=AG,             
              values_from=POP) %>%   
  mutate(YOUNG = rowSums(.[3:6])      
         +rowSums(.[12])) %>%
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])
         +rowSums(.[13:15]))%>% 
  mutate(`AGED`=rowSums(.[16:21])) %>% 
  mutate(`TOTAL`=rowSums(.[3:21])) %>%  
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
         /`ECONOMY ACTIVE`) %>%   
  select(`PA`, `SZ`, `YOUNG`,         
         `ECONOMY ACTIVE`, `AGED`,       
         `TOTAL`, `DEPENDENCY`)
```



## 4b) Joining the attribute data and geospatial data

Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2024 <- popdata2024 %>%   
  mutate_at(.vars = vars(PA, SZ),         
            .funs = list(toupper)) %>%   
  filter(`ECONOMY ACTIVE` > 0)
```


Next, *left_join()* is used to join the geographical data and attribute table using planning subzone name e.g. *SUBZONE_N* and *SZ* as the common identifier.

```{r}
mpsz_pop2024 <- left_join(mpsz, popdata2024,by = c("SUBZONE_N" = "SZ"))
```


We can save the Joined data and learn from the code chunk above:

```{r}
dir.create("data/rds", recursive = TRUE, showWarnings = FALSE)
write_rds(mpsz_pop2024, "data/rds/mpsz_pop2024.rds")
```


# 5 Choropleth Mapping Geospatial Data Using *tmap*

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. 

For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

Two approaches to prepare thematic map using *tmap*, 

## 5a) Plotting a choropleth map quickly by using *qtm()*

The easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. 

```{r}
par(bg = '#fffbe8')
tmap_mode("plot") 
qtm(shp = mpsz_pop2024, 
    fill = "DEPENDENCY")
```


-   *tmap_mode()* with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.

-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)

## 5b) Creating a choropleth map by using *tmap*’s elements

Despite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of *qtm()* is that it makes aesthetics of individual layers harder to control.

```{r}
tm_shape(mpsz_pop2024) +   
  tm_polygons(fill = "DEPENDENCY",      
              fill.scale = tm_scale_intervals(  
                style = "quantile",          
                n = 5,            
                values = "brewer.blues"), 
              fill.legend = tm_legend(     
                title = "Dependency ratio")) + 
  tm_title("Distribution of Dependency Ratio by planning subzone") + 
  tm_layout(frame = TRUE) +   tm_borders(fill_alpha = 0.5) + 
  tm_compass(type="8star", size = 2) +   
  tm_scalebar() + 
  tm_grid(alpha =0.2) +   
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS",       
             position = c("left", "bottom"))
```


### 5b.1 Drawing a base map

The basic building block of **tmap** is `tm_shape()` followed by one or more layer elemments such as `tm_polygons()`, `tm_symbols()`, `tm_lines()`, `tm_raster()` and `tm_text()`.

'tm_shape()` is used to define the input data (i.e *mpsz_pop2024*) and `tm_polygons()` is used to draw the planning subzone polygons

```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024) +  
  tm_polygons()
```


### 5b.2  Drawing a choropleth map using `tm_polygons()`

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.

```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024)+
  tm_polygons(fill = "DEPENDENCY")
```

By using *tm_polygons()*:

-   The default interval binning used to draw the choropleth map is called “pretty”

-   The default colour scheme used is `blues3` of ColorBrewer. 

-   By default, Missing value will be shaded in grey.

### 5b.3 Drawing a choropleth map using *tm_fill()* and \*tm_border()\*\*

Actually, `tm_polygons()` is a wraper of `tm_fill()` and `tm_border()`. `tm_fill()` shades the polygons by using the default colour scheme and `tm_borders()` adds the borders of the polygon features onto the choropleth map.


```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024)+
  tm_fill("DEPENDENCY")
```

Adding `tm_borders()` 

```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024)+
  tm_fill("DEPENDENCY") +
  tm_borders()
```

Customising `tm_borders()`,

-   `col` = border colour,

-   `lwd` = border line width. The default is 1, and

-   `lty` = border line type. The default is “solid”.

```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024)+
  tm_fill("DEPENDENCY") +
  tm_borders(col = "grey60",
             lwd = 0.1,
             lty = "dashed")
```

## 5c) Data classification methods of tmap

Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

### 5c.1  Plotting choropleth maps with built-in classification methods


```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024) +
  tm_polygons(fill = "DEPENDENCY",
              fill.scale = tm_scale_intervals(
                style = "quantile",
                n = 5)) +
  tm_borders(fill_alpha = 0.5)

```

In the code chunk below, *equal* data classification method is used.

```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024) +
  tm_polygons(fill = "DEPENDENCY",
              fill.scale = tm_scale_intervals(
                style = "equal",
                n = 5)) +
  tm_borders(fill_alpha = 0.5)
```

Notice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.


> DIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.

> DIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?

### 5c.2 Plotting choropleth map with custome break

For all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the `breaks` argument to the `tm_scale_intervals()`. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the `breaks` option (the values must be in increasing order).

Before we get started,explore the data.

```{r}
par(bg = '#fffbe8')
summary(mpsz_pop2024$DEPENDENCY)
```

```         
 Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's   0.1905  0.7450  0.8377  0.8738  0.9366 12.7500      94 
```

Plotting the custom breaks

```{r}
tm_shape(mpsz_pop2024)+
  tm_polygons(fill = "DEPENDENCY",
              fill.scale = tm_scale_intervals(
                breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00))) +
  tm_borders(fill_alpha = 0.5)
```

## 5d) Colour Scheme

**tmap** supports colour ramps either defined by the user or a set of predefined colour ramps from the **RColorBrewer** package.

### 5d.1 Using ColourBrewer palette

```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024) +
  tm_polygons(fill = "DEPENDENCY",
              fill.scale = tm_scale_intervals(
                style = "quantile",
                n = 5,
                values = "brewer.greens")) +
  tm_borders(fill_alpha = 0.5)
```

Notice that the choropleth map is shaded in green.

To reverse the colour shading, add a “-” prefix.

```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024) +
  tm_polygons(fill = "DEPENDENCY",
              fill.scale = tm_scale_intervals(
                style = "quantile",
                n = 5,
                values = "-brewer.greens")) +
  tm_borders(fill_alpha = 0.5)
```

Notice that the colour scheme has been reversed.

### 5d.2 Cartographic Furniture

Beside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.

In the code chunk below, `tm_compass()`, `tm_scale_bar()`, `tm_grid()` and `tm_credit()` are used to add compass, scale bar, grid lines and data sources onto the choropleth map.

```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024) +
  tm_polygons(fill = "DEPENDENCY",
              fill.scale = tm_scale_intervals(
                style = "quantile",
                n = 5)) +
  tm_borders(fill_alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scalebar() +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: data.gov.sg & singstat",
             position = c("left", "bottom"))
```

## 5e) Map Layout

Map layout refers to the combination of all map elements into a cohensive map. It includes the map background, frame, typography, scale, aspect ratio, margins, and more.

We can customize the map layout using the `tm_layout()` function.

### 5e.1 Map Legend

In **tmap**, several *legend* options are provided to change the placement, format and appearance of the legend.

```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024) +
  tm_polygons(fill = "DEPENDENCY",
              fill.scale = tm_scale_intervals(
                style = "quantile",
                n = 5),
              fill.legend = tm_legend(
                title = "Dependency ratio")) +
  tm_pos_auto_in() +
  tm_borders(fill_alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scalebar() +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: data.gov.sg & singstat",
             position = c("left", "bottom"))
```

### 5e.2 Map style

**tmap** allows a wide variety of layout settings to be changed which are called using *tmap_style()*.

```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024) +
  tm_polygons(fill = "DEPENDENCY",
              fill.scale = tm_scale_intervals(
                style = "quantile",
                n = 5,
                values = "-brewer.greens")) + 
  tm_borders(fill_alpha = 0.5) + 
  tmap_style("natural")
```

```{r}
tmap_style("white")
```

### 5e.3 Drawing Small Multiple Choropleth Maps

**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.

In **tmap**, small multiple maps can be plotted in three ways:

-   by assigning multiple values to at least one of the asthetic arguments,

-   by creating multiple stand-alone maps with *tmap_arrange()*, and

-   by defining a group-by variable in *tm_facets()*.

### 5e.4 By assigning multiple values to at least one of the aesthetic arguments

In this example, small multiple choropleth maps are created by assigning two variables to the visual variable (i.e. fill).

```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024) + 
  tm_polygons(
    fill = c("YOUNG", "AGED"),
    fill.legend = 
      tm_legend(position = tm_pos_in(
        "right", "bottom")),
    fill.scale = tm_scale_intervals(
      style = "equal", 
      n = 5,
      values = "brewer.blues")) +
  tm_borders(fill_alpha = 0.5) +
  tmap_style("natural")
```

### 5e.5 By arrange multiples choropleth maps in a grid layout

In this example, multiple choropleth maps are created and `tmap_arrnage()` is used to arrange them in a grid layout.

```{r}
par(bg = '#fffbe8')
youngmap <- tm_shape(mpsz_pop2024)+ 
  tm_polygons(fill = "YOUNG",
              fill.legend = tm_legend(
                position = tm_pos_in(
                  "right", "bottom"),
                  item.height = 0.8),
              fill.scale = tm_scale_intervals(
                style = "quantile", 
                values = "brewer.blues")) +
  tm_borders(fill_alpha = 0.5) +
  tm_title("Distribution of young population")
                
agedmap <- tm_shape(mpsz_pop2024)+ 
  tm_polygons(fill = "AGED",
              fill.legend = tm_legend(
                position = tm_pos_in(
                  "right", "bottom"),
                item.height = 0.8),
              fill.scale = tm_scale_intervals(
              style = "quantile", 
              values = "brewer.blues")) +
  tm_borders(fill_alpha = 0.5) +
  tm_title("Distribution of aged population")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

### 5e.6 By defining a group-by variable in *tm_facets()*

In this example, multiple small choropleth maps are created by using **tm_facets()**.

```{r}
par(bg = '#fffbe8')
tm_shape(mpsz_pop2024) +
  tm_fill(fill = "DEPENDENCY",
          fill.scale = tm_scale_intervals(
            style = "quantile",
            values = "brewer.blues")) + 
  tm_facets(by = "REGION_N",
            nrow = 2, 
            ncols = 3,
            free.coords=TRUE, 
            drop.units=TRUE) +
  tm_layout(legend.show = TRUE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(fill_alpha = 0.5)
```

## 5f) Mappping Spatial Object Meeting a Selection Criterion

Instead of creating small multiple choropleth map, you can also use `filter()` of **dplyr** package to select geographical area of interest and plot a choropleth map focus only on the selected region.

```{r}
par(bg = '#fffbe8')
mpsz_pop2024 %>%
  filter(REGION_N == "CENTRAL REGION") %>%
  tm_shape() +
  tm_polygons(fill = "DEPENDENCY",
              fill.scale = tm_scale_intervals(
                style = "quantile", 
                values = "brewer.greens"),
              fill.legend = tm_legend()) +
  tm_borders(fill_alpha = 0.5)
```

## 5g) Complementing Thematic Map with Statistical Chart

Maps and statistical charts complement each other by visually representing different aspects of the same data, offering a more comprehensive understanding. Maps excel at showing spatial relationships and geographical patterns, while charts effectively display numerical data, trends, and comparisons. Combining both allows for a more insightful and engaging data narrative, especially when dealing with spatial data that also has quantifiable characteristics.

With tmap, statistical chart and be incorporate into the map visualisation by using `fill.chat` argument of map layers and [**legend chart**](https://r-tmap.github.io/tmap/reference/tm_chart.html) feature as shown in the code chunk below.

```{r}
par(bg = '#fffbe8')
mpsz_pop2024 %>%
  filter(REGION_N == "CENTRAL REGION") %>%
  tm_shape() +
  tm_polygons(fill = "DEPENDENCY",
              fill.scale = tm_scale_intervals(
                style = "quantile", 
                values = "brewer.greens"),
              fill.legend = tm_legend(),
              fill.chart = tm_chart_box()) +
  tm_borders() +
  tm_layout(asp = 0.8)
```

In the code chunk below, We improve the visual representation further by highlighting and lebaling the outliers on the choropleth map.

```{r}
par(bg = '#fffbe8')
mpsz_selected <- mpsz_pop2024 %>%
  filter(REGION_N == "CENTRAL REGION")

stats <- boxplot.stats(mpsz_selected$DEPENDENCY)

outlier_vals <- stats$out

outlier_sf <- mpsz_selected[mpsz_selected$DEPENDENCY %in% outlier_vals, ]

tm_shape(mpsz_selected) +
  tm_polygons(fill = "DEPENDENCY",
          fill.scale = tm_scale_intervals(
            style = "quantile", 
            values = "brewer.blues"),
          fill.legend = tm_legend(),
          fill.chart = tm_chart_box()) +
  tm_borders(fill_alpha = 0.5) +
tm_shape(outlier_sf) +
  tm_borders(col = "red", lwd = 2) +
  tm_text("SUBZONE_N", col = "red", size = 0.7) +
  tm_layout(asp = 0.8)
```

## 5h) Creating Interactive Map**

Interactive maps let users actively explore and interact with the data they display. Unlike static maps, you can zoom in and out, pan across areas, click on locations for more information, and even work with data overlays or visualizations—making the experience more dynamic and informative. One of the great things about tmap is that it lets you switch easily between static and interactive maps using `tmap_mode()`, so you can choose the view that best suits your analysis.

By modifying the code chunk in sub-section 2.6, the code chunks below build an interactive map using

```{r}
par(bg = '#fffbe8')
region_selected <- mpsz_pop2024 %>%
  filter(REGION_N == "CENTRAL REGION")
region_bbox <- st_bbox(region_selected)

stats <- boxplot.stats(region_selected$DEPENDENCY)
outlier_vals <- stats$out
outlier_sf <- region_selected[region_selected$DEPENDENCY %in% outlier_vals, ]

tmap_mode("view")
tm_shape(region_selected, 
         bbox = region_bbox) +
  tm_fill("DEPENDENCY",
          id = "SUBZONE_N",
          popup.vars = c(
            "Name" = "SUBZONE_N", 
            "Dependency" = "DEPENDENCY")) +
  tm_borders() +
  tm_shape(outlier_sf) +
  tm_borders(col = "red", lwd = 2)
```

```{r}
tmap_mode("plot")
```

The interactive map above is far from satisfactory. While we want to encourage users to engage and explore the interactive by zooming in and out of the study area freely. But, users might lost in the cyberspace with too much freedom to zoom-in and zoom-out.

To address this issue, `set_zoom_limits` argument can be used to limit the map extend users can zooming in and out of the map areas as shown below.

```{r}
par(bg = '#fffbe8')
region_selected <- mpsz_pop2024 %>%
  filter(REGION_N == "CENTRAL REGION")
region_bbox <- st_bbox(region_selected)

stats <- boxplot.stats(region_selected$DEPENDENCY)
outlier_vals <- stats$out
outlier_sf <- region_selected[region_selected$DEPENDENCY %in% outlier_vals, ]

tmap_mode("view")

tm_shape(region_selected, 
         bbox = region_bbox) +
  tm_fill("DEPENDENCY",
          id = "SUBZONE_N",
          popup.vars = c(
            "Name" = "SUBZONE_N", 
            "Dependency" = "DEPENDENCY")) +
  tm_borders() +
  tm_shape(outlier_sf) +
  tm_borders(col = "red", lwd = 2) +
  tm_view(set_zoom_limits = c(12,14))
```

```{r}
tmap_mode("plot")
```
